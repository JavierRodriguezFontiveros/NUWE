ACCESO A LA BASE DE DATOS:

docker exec -it caixabank-backend-java-realestate-mysql-1 mysql -u root -p


üåê Antecedentes
Este reto simula un sistema de subastas inmobiliarias para CaixaBank. El backend est√° desarrollado en Java y ofrece diversas funcionalidades, entre ellas:
- Autenticaci√≥n y registro de usuarios mediante JWT;
- Extracci√≥n (scraping) de datos de propiedades directamente de Idealista;
- Un sistema autom√°tico de solicitud de hipotecas basado en los datos financieros del usuario;
- Un sistema de subastas de propiedades que utiliza RabbitMQ para gestionar pujas simult√°neas.

El objetivo es evaluar sus habilidades en el desarrollo de API seguras, extracci√≥n de datos externos, implementaci√≥n de reglas comerciales y procesamiento de mensajes asincr√≥nicos mediante colas.

caixabank-backend-java-realestate
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îî‚îÄ‚îÄmain
‚îÇ       ‚îú‚îÄ‚îÄ java
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ com
‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ round3
‚îÇ       ‚îÇ           ‚îî‚îÄ‚îÄ realestate
‚îÇ       ‚îÇ               ‚îú‚îÄ‚îÄ config           # Spring Security, RabbitMQ, and other configurations
‚îÇ       ‚îÇ               ‚îú‚îÄ‚îÄ controller       # REST API endpoints
‚îÇ       ‚îÇ               ‚îú‚îÄ‚îÄ entity           # JPA entities
‚îÇ       ‚îÇ               ‚îú‚îÄ‚îÄ messaging        # Message publishing/consuming classes (BidMessage, BidPublisher, etc.)
‚îÇ       ‚îÇ               ‚îú‚îÄ‚îÄ payload          # Request and response payload classes
‚îÇ       ‚îÇ               ‚îú‚îÄ‚îÄ repository       # Spring Data repositories
‚îÇ       ‚îÇ               ‚îî‚îÄ‚îÄ security         # JWT and UserDetails implementations
‚îÇ       ‚îî‚îÄ‚îÄ resources
‚îÇ           ‚îú‚îÄ‚îÄ application.properties         # Application configuration
‚îÇ           ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ Dockerfile                                 # Docker build instructions
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ ...

 Tareas
Tarea 1: Dockerfile y comprobaci√≥n del estado

Tarea 2: Iniciar sesi√≥n y registrarse con JWT

Tarea 3: Obtener datos de propiedades directamente de Idealista

Tarea 4: Sistema autom√°tico de solicitud de hipotecas

Tarea 5: Sistema de licitaci√≥n de una propiedad

Lea atentamente todo el archivo README, as√≠ como las gu√≠as detalladas para comprender completamente los requisitos del desaf√≠o.

M√°s informaci√≥n
El archivo application.properties contiene la configuraci√≥n necesaria para el correcto funcionamiento de la aplicaci√≥n.

Las pruebas de backend simular√°n la interacci√≥n de un usuario directamente con la API que se ejecuta en un contenedor y est√° expuesta en el puerto 3000

üì§ Env√≠o
Resolver las tareas propuestas.

Impulsa continuamente los cambios que has realizado.

Espere los resultados.

Haz clic en Enviar desaf√≠o cuando hayas alcanzado tu puntuaci√≥n m√°xima.

üìä Evaluaci√≥n
La puntuaci√≥n final se dar√° en funci√≥n de si se han cumplido o no los objetivos.

En este caso, el desaf√≠o se evaluar√° en 1450 (1050 para tareas de backend y 400 para calidad del c√≥digo) puntos que se distribuyen de la siguiente manera:

Backend
Tarea 1 : 50 puntos

Tarea 2 : 200 puntos

Tarea 3 : 250 puntos

Tarea 4 : 250 puntos

Tarea 5 : 300 puntos

Calidad del c√≥digo : 400 puntos

‚ùì Informaci√≥n adicional
P1: ¬øPuedo cambiar algo en la aplicaci√≥n?

A1: S√≠, dado que se trata de un hackathon y la aplicaci√≥n est√° dockerizada, puedes modificar cualquier elemento del proyecto, excepto las funciones predefinidas y archivos como: docker-compose.ymly application.properties. Si modificas application.properties, aseg√∫rate de restaurarlo a su estado original antes de enviar el proyecto. DockerfileSe entrega configurado para funcionar correctamente.

P2: ¬øPuedo agregar recursos que no est√©n en pom.xml?

A2: S√≠, puedes agregar nuevos recursos si es necesario, pero ten en cuenta que todo lo necesario para desarrollarlo ya est√° agregado.

P3: ¬øEs completamente necesario realizar primero la configuraci√≥n del Dockerfile?

A3: S√≠. Para garantizar la integridad de la correcci√≥n, un entorno Dockerizado es la opci√≥n m√°s segura. DockerfileSe proporciona configurado para funcionar completamente, por lo que solo es necesario enviar el c√≥digo y comprobar que la puntuaci√≥n aparece en la primera tarea.

P4: Obtuve 0 puntos en la tarea 1, ¬øqu√© pasa?

A4: Probablemente haya una configuraci√≥n incorrecta en uno de los siguientes archivos: - Dockerfile- application.propertiesTambi√©n es posible que su c√≥digo no se compile y el contenedor de la aplicaci√≥n no se implemente y la conexi√≥n API falle.

Q5: ¬øCu√°l es la √∫ltima versi√≥n de README?

A5: La versi√≥n m√°s reciente siempre ser√° la que aparezca en la plataforma. Si hay alg√∫n error en el archivo L√©ame, puede consultar la versi√≥n actualizada en el sitio web de NUWE.

Task 1 soluci√≥n: Manipulando los puertos de dockercompose.yml

***************************************************
***********************TASK 2**********************
***************************************************

Tarea 2: Iniciar sesi√≥n y registrarse con JWT
Objetivo:
Implementar puntos finales de registro e inicio de sesi√≥n de usuarios seguros utilizando JSON Web Tokens (JWT) para la autenticaci√≥n.

Requisitos detallados:

Registro (POST /api/auth/register ):

Acepte los detalles del usuario, como nombre de usuario, correo electr√≥nico y contrase√±a.

Validar que el correo electr√≥nico sea √∫nico.

Cifre la contrase√±a (por ejemplo, utilizando BCrypt) antes de almacenarla en la base de datos.

Establecer nuevos usuarios como unemployedpredeterminados.

Devolver un mensaje de √©xito una vez que el usuario se haya registrado.

Acceso (POST /api/auth/login ):

Aceptar las credenciales del usuario (nombre de usuario/correo electr√≥nico y contrase√±a).

Validar las credenciales contra los datos almacenados.

Si la autenticaci√≥n es exitosa, genere un JWT que incluya al menos el ID del usuario como asunto.

El JWT debe tener un tiempo de expiraci√≥n definido en las propiedades de la aplicaci√≥n.

Devuelve el JWT en la respuesta. Por ejemplo: { "success": true, "token": "<JWT_TOKEN>" }.

Comprobaci√≥n de sesi√≥n (GET /api/user/me ):

Devuelve el ID del usuario, el nombre de usuario y el correo electr√≥nico.

Se utiliza para verificar que los tokens funcionan correctamente.

  { "id": 1, "username": "nuwe", "email": "nuwe@example.com" }
Consideraciones de seguridad:

Aseg√∫rese de que el JWT se utilice para proteger todos los puntos finales que requieren autenticaci√≥n.

Implemente un filtro JWT que valide los tokens entrantes y cargue los detalles del usuario en consecuencia.


guia:

Endpoint	Method	Auth Required	Possible Status Codes	Response Example
/api/auth/register	POST	No	200 OK, 400 Bad Request	{ "success": true, "message": "User successfully registered" }
/api/auth/login	POST	No	200 OK, 401 Unauthorized	{ "accessToken": "eyJhbGciOiJIUzUxMiJ9...", "tokenType": "Bearer" }
/api/user/me	GET	Yes	200 OK, 401 Unauthorized	{ "id": 1, "username": "nuwe", "email": "nuwe@example.com" }



PRUEBAS COMPLETAS:
-------------------------REGISTER POST-----------------------------
Content-Type: application/json
http://localhost:3000/api/auth/register
{
  "username": "nuwe",
  "email": "nuwe@example.com",
  "password": "testpassword12#"
}

{ "success": true, "message": "User successfully registered" }

{
  "username": "nuwe",
  "email": "nuw2e@example.com",
  "password": "testp2assword12#"
}

{ "success": false, "message": "The username already exists" }

{
  "username": "nuwe22",
  "email": "nuwe@example.com",
  "password": "testpassword122#"
}

{ "success": false, "message": "Email already exists" }

-------------------------LOGIN POST---------------------------------
Content-Type: application/json
http://localhost:3000/api/auth/login
{
  "usernameOrEmail": "nuwe",
  "password": "testpassword12#"
}

{
  "accessToken": "eyJhbGciOiJIUzUxMiJ9...",
  "tokenType": "Bearer"
}

{
  "usernameOrEmail": "nuwe",
  "password": "testpassw1ord12#"
}


{ "success": false, "message": "Unauthorized: Bad credentials" }

-------------------------SESION GET---------------------------------
Content-Type: application/json
http://localhost:3000/api/user/me

{
    "id": 1,
    "username": "nuwe",
    "email": "nuwe@example.com"
}
""""headers"""""
Authorization
bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzQyNDAwNzQ5LCJleHAiOjE3NDI0MDQzNDl9.ZTacc3Qmj-GZe1b_yrqzx0xIa6JxM5R9nZqvWJ4I0pyAY8Cu6yFGUo75HIrCNHRFqmPIsJpsqqni4eIRFhxcxQ

{
    "success": false,
    "error": "Unauthorised: Full authentication is required to access this resource"
}


http://localhost:3000/api/auth/register POST
{
  "username": "nuwe",
  "email": "nuwe@example.com",
  "password": "testpassword12#"
}

http://localhost:3000/api/auth/login POST
{
  "usernameOrEmail": "nuwe",
  "password": "testpassword12#"
}

""""headers"""""
Authorization
bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxIiwiaWF0IjoxNzQyNDAwNzQ5LCJleHAiOjE3NDI0MDQzNDl9.ZTacc3Qmj-GZe1b_yrqzx0xIa6JxM5R9nZqvWJ4I0pyAY8Cu6yFGUo75HIrCNHRFqmPIsJpsqqni4eIRFhxcxQ


http://localhost:3000/api/user/me  GET

{
    "id": 1,
    "username": "nuwe",
    "email": "nuwe@example.com"
}


--------------------------PRUEBAS SCRAPING--------------------------
http://localhost:3000/api/scrape POST

Headers: Content-Type: application/json
{
    "url": "https://www.idealista.com/inmueble/104498284/",
    "store": false
}

{
    "data": {
        "fullTitle": "Casa o chalet independiente en venta en Las Rozas",
        "rooms": "9 hab.",
        "size": "361 m¬≤",
        "price": "680.000",
        "location": "Campoo-Los Valles, Cantabria",
        "type": "Casa",
        "url": "https://www.idealista.com/inmueble/104498284/"
    },
    "saved": false
}


{
    "url": "https://www.idealista.com/inmueble/104498284/",
    "store": true
}

{
    "data": {
        "fullTitle": "Casa o chalet independiente en venta en Las Rozas",
        "rooms": "9 hab.",
        "size": "361 m¬≤",
        "price": "680.000",
        "location": "Campoo-Los Valles, Cantabria",
        "type": "Casa",
        "url": "https://www.idealista.com/inmueble/104498284/"
    },
    "saved": true
}

--------------------------Tarea 5--------------------------
http://localhost:3000/api/auction/create POST

{
  "propertyId": 1,
  "startTime": "2025-03-07T10:00:00",
  "endTime": "2025-03-07T11:00:00",
  "minIncrement": 1000,
  "startingPrice": 335000
}

{
  "success": true,
  "message": "Auction created successfully.",
  "auctionId": 1
}

POSIBLES ERRORES:


{
  "success": false,
  "error": "Property not found."
}

{
  "success": false,
  "error": "Property is not available."
}
